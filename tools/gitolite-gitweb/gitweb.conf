# debian gitweb conf with manual gitolite install
# handle gitolite 3 acl in gitweb

# path to git projects (<project>.git)
#$projectroot = "/var/cache/git";
$projectroot = "/home/git/repositories";

# directory to use for temp files
$git_temp = "/tmp";

# target of the home link on top of all pages
#$home_link = $my_uri || "/";

# html text to include at home page
#$home_text = "indextext.html";

# file with project list; by default, simply scan the projectroot dir.
#$projects_list = $projectroot;
$projects_list = "/home/git/projects.list";

# stylesheet to use
#@stylesheets = ("static/gitweb.css");
#$stylesheet = "/gitweb.css";

# javascript code for gitweb
#$javascript = "static/gitweb.js";

# logo to use
#$logo = "static/git-logo.png";
#$logo = "/git-logo.png";

# the 'favicon'
#$favicon = "static/git-favicon.png";
#$favicon = "/git-favicon.png";

# --------------------------------------------
# Per-repo authorization based on gitolite ACL
# Include this in gitweb.conf
# See doc/3-faq-tips-etc.mkd for more info

# please note that the author does not have personal experience with gitweb
# and does not use it. Some testing may be required. Patches welcome but
# please make sure they are tested against a "github" version of gitolite
# and not an RPM or a DEB, for obvious reasons.

# the following variables are needed by gitolite; please edit before using

# HOME of the gitolite user
BEGIN {
    # HOME of the gitolite user
    $ENV{HOME} = "/home/git";
    #bin dir
    $ENV{GL_BINDIR} = "$ENV{HOME}/bin";
    # gitolite source lib dir
    $ENV{GL_LIBDIR} = "$ENV{HOME}/gitolite/src/lib";
}

# this should normally not be anything else
$ENV{GL_RC} = "$ENV{HOME}/.gitolite.rc";

# finally the user name
$ENV{GL_USER} = $cgi->remote_user || "gitweb";

# get Gitolite Perl API
use lib $ENV{GL_LIBDIR};
use Gitolite::Easy;

# set project root etc. absolute paths
$ENV{GL_REPO_BASE_ABS} = ( $REPO_BASE =~ m(^/) ? $REPO_BASE : "$gl_home/$REPO_BASE" );
#$projects_list = $projectroot = $ENV{GL_REPO_BASE_ABS};
$projects_list = $projectroot ;

# Gitweb authorization hook routine
$export_auth_hook = sub {
    my $repo = shift;
    # gitweb passes us the full repo path; so we strip the beginning
    # and the end, to get the repo name as it is specified in gitolite conf
    return unless $repo =~ s/^\Q$projectroot\E\/?(.+)\.git$/$1/;
     
    return can_read($repo);
};

# git-diff-tree(1) options to use for generated patches
#@diff_opts = ("-M");
@diff_opts = ();
